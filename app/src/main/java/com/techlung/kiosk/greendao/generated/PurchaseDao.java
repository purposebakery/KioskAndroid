package com.techlung.kiosk.greendao.generated;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PURCHASE".
 */
public class PurchaseDao extends AbstractDao<Purchase, Long> {

    public static final String TABLENAME = "PURCHASE";
    private DaoSession daoSession;

    ;
    private Query<Purchase> customer_PurchaseListQuery;
    private String selectDeep;

    public PurchaseDao(DaoConfig config) {
        super(config);
    }

    public PurchaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AMOUNT\" INTEGER," + // 1: amount
                "\"ARTICLE_ID\" INTEGER," + // 2: articleId
                "\"CUSTOMER_ID\" INTEGER);"); // 3: customerId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Purchase entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(2, amount);
        }

        Long articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindLong(3, articleId);
        }

        Long customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindLong(4, customerId);
        }
    }

    @Override
    protected void attachEntity(Purchase entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Purchase readEntity(Cursor cursor, int offset) {
        Purchase entity = new Purchase( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // amount
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // articleId
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // customerId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Purchase entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAmount(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setArticleId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCustomerId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Purchase entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Purchase entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "purchaseList" to-many relationship of Customer.
     */
    public List<Purchase> _queryCustomer_PurchaseList(Long customerId) {
        synchronized (this) {
            if (customer_PurchaseListQuery == null) {
                QueryBuilder<Purchase> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomerId.eq(null));
                customer_PurchaseListQuery = queryBuilder.build();
            }
        }
        Query<Purchase> query = customer_PurchaseListQuery.forCurrentThread();
        query.setParameter(0, customerId);
        return query.list();
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getArticleDao().getAllColumns());
            builder.append(" FROM PURCHASE T");
            builder.append(" LEFT JOIN ARTICLE T0 ON T.\"ARTICLE_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected Purchase loadCurrentDeep(Cursor cursor, boolean lock) {
        Purchase entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Article article = loadCurrentOther(daoSession.getArticleDao(), cursor, offset);
        entity.setArticle(article);

        return entity;
    }

    public Purchase loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<Purchase> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Purchase> list = new ArrayList<Purchase>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<Purchase> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<Purchase> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity Purchase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Amount = new Property(1, Integer.class, "amount", false, "AMOUNT");
        public final static Property ArticleId = new Property(2, Long.class, "articleId", false, "ARTICLE_ID");
        public final static Property CustomerId = new Property(3, Long.class, "customerId", false, "CUSTOMER_ID");
    }

}
